#!/usr/bin/env python3
import os
import sys
import subprocess
import importlib.util

# Get the directory of this script
script_dir = os.path.dirname(os.path.realpath(__file__))
build_root = '@BUILD_ROOT@'
source_root = '@SOURCE_ROOT@'
system_python = '@SYSTEM_PYTHON@'

# Set environment variables
schema_dir = os.path.join(build_root, 'data', 'glib-2.0', 'schemas')
os.environ['GSETTINGS_SCHEMA_DIR'] = schema_dir
os.environ['XDG_DATA_DIRS'] = f"{os.path.join(build_root, 'data')}:{os.environ.get('XDG_DATA_DIRS', '/usr/local/share:/usr/share')}"

# Add the source directory to Python path
if source_root not in sys.path:
    sys.path.insert(0, source_root)

# Check if we can import gi
gi_available = importlib.util.find_spec('gi') is not None

if not gi_available:
    print("WARNING: Cannot import 'gi' module in the current Python environment")
    print(f"Current Python: {sys.executable}")
    print("Attempting to run with system Python instead...")

    # Build the command to run with system Python
    cmd = [
        system_python,
        '-c',
        f"import sys; sys.path.insert(0, '{source_root}'); "
        f"import os; os.environ['GSETTINGS_SCHEMA_DIR'] = '{schema_dir}'; "
        f"os.environ['XDG_DATA_DIRS'] = '{os.path.join(build_root, 'data')}:{os.environ.get('XDG_DATA_DIRS', '/usr/local/share:/usr/share')}'; "
        "from src.main import main; main()"
    ]

    # Execute with system Python
    sys.exit(subprocess.call(cmd))
else:
    # We have gi, so run normally
    from src.main import main
    sys.exit(main())
